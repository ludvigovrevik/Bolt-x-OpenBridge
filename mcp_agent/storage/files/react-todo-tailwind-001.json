{
  "metadata": {
    "artifact_id": "react-todo-tailwind-001",
    "message_id": "UaIE00f",
    "chat_id": "350",
    "url_id": "react-todo-tailwind-001",
    "application_name": "React Todo App with Tailwind",
    "thread_id": "39da91a8-70cf-4d2e-899d-1d43619cd3e7",
    "created_at": "2025-05-31T07:24:41.884293",
    "updated_at": "2025-06-08T11:42:00.279253",
    "update_count": 5,
    "file_count": 10,
    "total_size": 5668,
    "project_info": {
      "name": "react-todo-app",
      "version": "1.0.0",
      "description": null,
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0"
      },
      "scripts": {
        "dev": "vite",
        "build": "vite build",
        "preview": "vite preview"
      },
      "dependencies_count": 2
    }
  },
  "files": [
    {
      "path": "/home/project/package.json",
      "content": "{\n    \"name\": \"react-todo-app\",\n    \"version\": \"1.0.0\",\n    \"type\": \"module\",\n    \"dependencies\": {\n      \"react\": \"^18.2.0\",\n      \"react-dom\": \"^18.2.0\"\n    },\n    \"devDependencies\": {\n      \"@vitejs/plugin-react\": \"^4.0.0\",\n      \"vite\": \"^4.3.9\",\n      \"tailwindcss\": \"^3.3.2\",\n      \"postcss\": \"^8.4.21\",\n      \"autoprefixer\": \"^10.4.14\"\n    },\n    \"scripts\": {\n      \"dev\": \"vite\",\n      \"build\": \"vite build\",\n      \"preview\": \"vite preview\"\n    }\n  }\n",
      "is_binary": false,
      "size": 459,
      "type": "text"
    },
    {
      "path": "/home/project/vite.config.js",
      "content": "import { defineConfig } from 'vite'\n  import react from '@vitejs/plugin-react'\n\n  export default defineConfig({\n    plugins: [react()]\n  })\n",
      "is_binary": false,
      "size": 140,
      "type": "text"
    },
    {
      "path": "/home/project/tailwind.config.js",
      "content": "/** @type {import('tailwindcss').Config} */\n  export default {\n    content: [\n      \"./index.html\",\n      \"./src/**/*.{js,ts,jsx,tsx}\"\n    ],\n    theme: {\n      extend: {}\n    },\n    plugins: []\n  }\n",
      "is_binary": false,
      "size": 199,
      "type": "text"
    },
    {
      "path": "/home/project/postcss.config.js",
      "content": "export default {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {}\n    }\n  }\n",
      "is_binary": false,
      "size": 88,
      "type": "text"
    },
    {
      "path": "/home/project/index.html",
      "content": "<!doctype html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <title>React Todo App</title>\n    </head>\n    <body>\n      <div id=\"root\"></div>\n      <script type=\"module\" src=\"/src/main.jsx\"></script>\n    </body>\n  </html>\n",
      "is_binary": false,
      "size": 387,
      "type": "text"
    },
    {
      "path": "/home/project/src/main.jsx",
      "content": "import React from 'react'\n  import ReactDOM from 'react-dom/client'\n  import App from './App.jsx'\n  import './index.css'\n\n  ReactDOM.createRoot(document.getElementById('root')).render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  )\n",
      "is_binary": false,
      "size": 250,
      "type": "text"
    },
    {
      "path": "/home/project/src/index.css",
      "content": "@tailwind base;\n  @tailwind components;\n  @tailwind utilities;\n",
      "is_binary": false,
      "size": 63,
      "type": "text"
    },
    {
      "path": "/home/project/src/App.jsx",
      "content": "import React, { useState } from 'react'\n\n  function App() {\n    const [tasks, setTasks] = useState([])\n    const [newTask, setNewTask] = useState('')\n\n    const handleAddTask = () => {\n      if (newTask.trim() !== '') {\n        setTasks([...tasks, { id: Date.now(), text: newTask, completed: false }])\n        setNewTask('')\n      }\n    }\n\n    const handleToggleComplete = (id) => {\n      setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task))\n    }\n\n    const handleDeleteTask = (id) => {\n      setTasks(tasks.filter(task => task.id !== id))\n    }\n\n    return (\n      <div className=\"min-h-screen bg-gray-100 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md bg-white rounded-lg shadow p-6\">\n          <h1 className=\"text-3xl font-bold mb-4 text-center text-blue-600\">Todo List</h1>\n          <div className=\"flex mb-4\">\n            <input\n              type=\"text\"\n              className=\"flex-1 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n              placeholder=\"Add a new task\"\n              value={newTask}\n              onChange={(e) => setNewTask(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleAddTask()}\n            />\n            <button\n              className=\"ml-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n              onClick={handleAddTask}\n            >\n              Add\n            </button>\n          </div>\n          <ul className=\"space-y-2\">\n            {tasks.map(task => (\n              <li key={task.id} className=\"flex items-center justify-between p-2 border border-gray-200 rounded\">\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={task.completed}\n                    onChange={() => handleToggleComplete(task.id)}\n                    className=\"mr-2\"\n                  />\n                  <span className={task.completed ? 'line-through text-gray-500' : ''}>{task.text}</span>\n                </div>\n                <button\n                  className=\"ml-4 text-red-500 hover:text-red-700\"\n                  onClick={() => handleDeleteTask(task.id)}\n                >\n                  Delete\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n\n  export default App\n",
      "is_binary": false,
      "size": 2424,
      "type": "text"
    },
    {
      "path": "/home/project/src/components/Header.jsx",
      "content": "import React, { useState } from 'react'\n\nfunction Header() {\n  const [darkMode, setDarkMode] = useState(false)\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode)\n    if (!darkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  }\n\n  return (\n    <div className=\"w-full flex justify-end p-4 bg-gray-200 dark:bg-gray-800\">\n      <button\n        className=\"px-4 py-2 rounded bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-400 dark:hover:bg-gray-600\"\n        onClick={toggleDarkMode}\n      >\n        {darkMode ? 'Light Mode' : 'Dark Mode'}\n      </button>\n    </div>\n  )\n}\n\nexport default Header\n",
      "is_binary": false,
      "size": 716,
      "type": "text"
    },
    {
      "path": "/home/project/src/components/TodoList.jsx",
      "content": "import React from 'react'\n\nfunction TodoList({ tasks, onToggle, onDelete }) {\n  return (\n    <ul className=\"space-y-2\">\n      {tasks.map(task => (\n        <li key={task.id} className=\"flex items-center justify-between p-2 border border-gray-200 rounded dark:border-gray-600\">\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={task.completed}\n              onChange={() => onToggle(task.id)}\n              className=\"mr-2\"\n            />\n            <span className={task.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-800 dark:text-gray-200'}>\n              {task.text}\n            </span>\n          </div>\n          <button\n            className=\"ml-4 text-red-500 hover:text-red-700\"\n            onClick={() => onDelete(task.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default TodoList\n",
      "is_binary": false,
      "size": 942,
      "type": "text"
    }
  ],
  "messages": [
    {
      "role": "user",
      "content": "Build a todo app in React using Tailwind",
      "data": null
    },
    {
      "role": "assistant",
      "content": "<boltArtifact title=\"React Todo App with Tailwind\" id=\"react-todo-tailwind-001\">\n  <boltAction type=\"file\" filePath=\"package.json\">\n  {\n    \"name\": \"react-todo-app\",\n    \"version\": \"1.0.0\",\n    \"type\": \"module\",\n    \"dependencies\": {\n      \"react\": \"^18.2.0\",\n      \"react-dom\": \"^18.2.0\"\n    },\n    \"devDependencies\": {\n      \"@vitejs/plugin-react\": \"^4.0.0\",\n      \"vite\": \"^4.3.9\",\n      \"tailwindcss\": \"^3.3.2\",\n      \"postcss\": \"^8.4.21\",\n      \"autoprefixer\": \"^10.4.14\"\n    },\n    \"scripts\": {\n      \"dev\": \"vite\",\n      \"build\": \"vite build\",\n      \"preview\": \"vite preview\"\n    }\n  }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"vite.config.js\">\n  import { defineConfig } from 'vite'\n  import react from '@vitejs/plugin-react'\n\n  export default defineConfig({\n    plugins: [react()]\n",
      "data": null
    },
    {
      "role": "assistant",
      "content": "<boltArtifact title=\"React Todo App with Tailwind\" id=\"react-todo-tailwind-001\">\n  <boltAction type=\"file\" filePath=\"package.json\">\n  {\n    \"name\": \"react-todo-app\",\n    \"version\": \"1.0.0\",\n    \"type\": \"module\",\n    \"dependencies\": {\n      \"react\": \"^18.2.0\",\n      \"react-dom\": \"^18.2.0\"\n    },\n    \"devDependencies\": {\n      \"@vitejs/plugin-react\": \"^4.0.0\",\n      \"vite\": \"^4.3.9\",\n      \"tailwindcss\": \"^3.3.2\",\n      \"postcss\": \"^8.4.21\",\n      \"autoprefixer\": \"^10.4.14\"\n    },\n    \"scripts\": {\n      \"dev\": \"vite\",\n      \"build\": \"vite build\",\n      \"preview\": \"vite preview\"\n    }\n  }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"vite.config.js\">\n  import { defineConfig } from 'vite'\n  import react from '@vitejs/plugin-react'\n\n  export default defineConfig({\n    plugins: [react()]\n  })\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"tailwind.config.js\">\n  /** @type {import('tailwindcss').Config} */\n  export default {\n    content: [\n      \"./index.html\",\n      \"./src/**/*.{js,ts,jsx,tsx}\"\n    ],\n    theme: {\n      extend: {}\n    },\n    plugins: []\n  }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"postcss.config.js\">\n  export default {\n    plugins: {\n      tailwindcss: {},\n      autoprefixer: {}\n    }\n  }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"index.html\">\n  <!doctype html>\n  <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\" />\n      <link rel=\"icon\" type=\"image/svg+xml\" href=\"/vite.svg\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n      <title>React Todo App</title>\n    </head>\n    <body>\n      <div id=\"root\"></div>\n      <script type=\"module\" src=\"/src/main.jsx\"></script>\n    </body>\n  </html>\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/main.jsx\">\n  import React from 'react'\n  import ReactDOM from 'react-dom/client'\n  import App from './App.jsx'\n  import './index.css'\n\n  ReactDOM.createRoot(document.getElementById('root')).render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  )\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/index.css\">\n  @tailwind base;\n  @tailwind components;\n  @tailwind utilities;\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/App.jsx\">\n  import React, { useState } from 'react'\n\n  function App() {\n    const [tasks, setTasks] = useState([])\n    const [newTask, setNewTask] = useState('')\n\n    const handleAddTask = () => {\n      if (newTask.trim() !== '') {\n        setTasks([...tasks, { id: Date.now(), text: newTask, completed: false }])\n        setNewTask('')\n      }\n    }\n\n    const handleToggleComplete = (id) => {\n      setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task))\n    }\n\n    const handleDeleteTask = (id) => {\n      setTasks(tasks.filter(task => task.id !== id))\n    }\n\n    return (\n      <div className=\"min-h-screen bg-gray-100 flex items-center justify-center p-4\">\n        <div className=\"w-full max-w-md bg-white rounded-lg shadow p-6\">\n          <h1 className=\"text-3xl font-bold mb-4 text-center text-blue-600\">Todo List</h1>\n          <div className=\"flex mb-4\">\n            <input\n              type=\"text\"\n              className=\"flex-1 border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n              placeholder=\"Add a new task\"\n              value={newTask}\n              onChange={(e) => setNewTask(e.target.value)}\n              onKeyDown={(e) => e.key === 'Enter' && handleAddTask()}\n            />\n            <button\n              className=\"ml-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n              onClick={handleAddTask}\n            >\n              Add\n            </button>\n          </div>\n          <ul className=\"space-y-2\">\n            {tasks.map(task => (\n              <li key={task.id} className=\"flex items-center justify-between p-2 border border-gray-200 rounded\">\n                <div className=\"flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={task.completed}\n                    onChange={() => handleToggleComplete(task.id)}\n                    className=\"mr-2\"\n                  />\n                  <span className={task.completed ? 'line-through text-gray-500' : ''}>{task.text}</span>\n                </div>\n                <button\n                  className=\"ml-4 text-red-500 hover:text-red-700\"\n                  onClick={() => handleDeleteTask(task.id)}\n                >\n                  Delete\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n\n  export default App\n  </boltAction>\n\n  <boltAction type=\"shell\">npm install</boltAction>\n  <boltAction type=\"shell\">npm run dev</boltAction>\n</boltArtifact>",
      "data": null
    },
    {
      "role": "user",
      "content": "Can you remake the main.jsx file and add the components into a components folder? Also, can you add a header where we can change light/dark mode in the application?",
      "data": null
    },
    {
      "role": "assistant",
      "content": "<boltArtifact title=\"React Todo App with Components and Dark Mode Toggle\" id=\"react-todo-darkmode-002\">\n  <boltAction type=\"file\" filePath=\"src/main.jsx\">\nimport React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.jsx'\nimport './index.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/App.jsx\">\nimport React, { useState } from 'react'\nimport Header from './components/Header.jsx'\nimport TodoList from './components/TodoList.jsx'\n\nfunction App() {\n  const [tasks, setTasks] = useState([])\n  const [newTask, setNewTask] = useState('')\n\n  const handleAddTask = () => {\n    if (newTask.trim() !== '') {\n      setTasks([...tasks, { id: Date.now(), text: newTask, completed: false }])\n      setNewTask('')\n    }\n  }\n\n  const handleToggleComplete = (id) => {\n    setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task))\n  }\n\n  const handleDeleteTask = (id) => {\n    setTasks(tasks.filter(task => task.id !== id))\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 dark:bg-gray-900 flex flex-col items-center justify-start p-4\">\n      <Header />\n      <div className=\"w-full max-w-md bg-white dark:bg-gray-800 rounded-lg shadow p-6 mt-4\">\n        <h1 className=\"text-3xl font-bold mb-4 text-center text-blue-600 dark:text-blue-400\">Todo List</h1>\n        <div className=\"flex mb-4\">\n          <input\n            type=\"text\"\n            className=\"flex-1 border border-gray-300 dark:border-gray-600 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 dark:bg-gray-700 dark:text-white\"\n            placeholder=\"Add a new task\"\n            value={newTask}\n            onChange={(e) => setNewTask(e.target.value)}\n            onKeyDown={(e) => e.key === 'Enter' && handleAddTask()}\n          />\n          <button\n            className=\"ml-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\"\n            onClick={handleAddTask}\n          >\n            Add\n          </button>\n        </div>\n        <TodoList\n          tasks={tasks}\n          onToggle={handleToggleComplete}\n          onDelete={handleDeleteTask}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/components/Header.jsx\">\nimport React, { useState } from 'react'\n\nfunction Header() {\n  const [darkMode, setDarkMode] = useState(false)\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode)\n    if (!darkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  }\n\n  return (\n    <div className=\"w-full flex justify-end p-4 bg-gray-200 dark:bg-gray-800\">\n      <button\n        className=\"px-4 py-2 rounded bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-400 dark:hover:bg-gray-600\"\n        onClick={toggleDarkMode}\n      >\n        {darkMode ? 'Light Mode' : 'Dark Mode'}\n      </button>\n    </div>\n  )\n}\n\nexport default Header\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/components/TodoList.jsx\">\nimport React from 'react'\n\nfunction TodoList({ tasks, onToggle, onDelete }) {\n  return (\n    <ul className=\"space-y-2\">\n      {tasks.map(task => (\n        <li key={task.id} className=\"flex items-center justify-between p-2 border border-gray-200 rounded dark:border-gray-600\">\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={task.completed}\n              onChange={() => onToggle(task.id)}\n              className=\"mr-2\"\n            />\n            <span className={task.completed ? 'line-through text-gray-500 dark:text-gray-400' : 'text-gray-800 dark:text-gray-200'}>\n              {task.text}\n            </span>\n          </div>\n          <button\n            className=\"ml-4 text-red-500 hover:text-red-700\"\n            onClick={() => onDelete(task.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default TodoList\n  </boltAction>  \n</boltArtifact>",
      "data": null
    },
    {
      "role": "user",
      "content": "The header dark/light mode is not working properly, when i click on the button there is no change in the color of the application. Can you see why?",
      "data": null
    },
    {
      "role": "assistant",
      "content": "<boltArtifact title=\"Fix Header Dark/Light Mode Functionality\" id=\"react-todo-darkmode-003\">\n  <boltAction type=\"file\" filePath=\"src/components/Header.jsx\">\nimport React, { useState, useEffect } from 'react'\n\nfunction Header() {\n  const [darkMode, setDarkMode] = useState(false)\n\n  const toggleDarkMode = () => {\n    setDarkMode(prev => {\n      const newMode = !prev\n      if (newMode) {\n        document.documentElement.classList.add('dark')\n      } else {\n        document.documentElement.classList.remove('dark')\n      }\n      return newMode\n    })\n  }\n\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  }, [darkMode])\n\n  return (\n    <div className=\"w-full flex justify-end p-4 bg-gray-200 dark:bg-gray-800\">\n      <button\n        className=\"px-4 py-2 rounded bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 hover:bg-gray-400 dark:hover:bg-gray-600\"\n        onClick={toggleDarkMode}\n      >\n        {darkMode ? 'Light Mode' : 'Dark Mode'}\n      </button>\n    </div>\n  )\n}\n\nexport default Header\n  </boltAction>\n</boltArtifact>",
      "data": null
    }
  ]
}